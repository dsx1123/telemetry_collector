# minimum configuration example of telegraf
# Full example please refer to command telegraf config
#
[agent]
logtarget = "file"
logfile = "/var/log/telegraf/telegraf.log"
#logfile = "/etc/telegraf/log/telegraf.log"
debug = true
# Changing hostname to identify data sent from THIS container 
# in influxdb data explorer
# hostname = "telegraf"
hostname = "telegraf_container_1"
interval = "10s"
round_interval = false
metric_batch_size = 1000
metric_buffer_limit = 10000

[[inputs.cisco_telemetry_mdt]]
transport = "grpc"
service_address = ":57000"

# uncomment below to enable tls for dial-out plguin
#tls_cert = "/etc/telegraf/cert/telegraf.crt"
#tls_key = "/etc/telegraf/cert/telegraf.key"

# Tag Strategy
# Initial tag just breaks out the different plugins in the .conf file.
# Original tag name was tag1 which is meaningless when filtering
# data in either influxdb or grafana.
# Also note that the initial tags of "nxos_dialout" and "nxos_gnmi"
# are also unhelpful as they correspond to the names of the buckets
# created to store dial-out and dial-in data.
# The names also need to be changed to remove nxos.  (Question: 
# can data from different system platforms be stored in the same bucket? 
# The answer might be yes if based on openconfig yang models; no if 
# based on native models for each platform and sw release.)
[inputs.cisco_telemetry_mdt.tags]
plugin_source = "cisco_mdt_dialout"

[[inputs.ping]]
urls = ["10.62.149.173","10.62.149.174","10.62.149.175"]
[inputs.ping.tags]
plugin_source = "ping"

[[outputs.influxdb_v2]]
urls = ["http://influxdb:8086"]
token = "MySecretToken"
organization = "Cisco"
bucket = "nxos_dialout"
[outputs.influxdb_v2.tagpass]
plugin_source = ["cisco_mdt_dialout", "ping"]

[[outputs.file]]
## Files to write to, "stdout" is a specially handled file.
files = ["/tmp/metrics.out"]
rotation_max_archives = 3
rotation_max_size = "100MB"
data_format = "json"
