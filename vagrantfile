# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.

Vagrant.configure(2) do |config|
  config.vagrant.plugins = ["vagrant-vbguest", "vagrant-docker-compose"]
  config.vm.box = "ubuntu/focal64"
  config.vm.define "telemetry-collector"
  config.vm.hostname = "telemetry-collector"
  config.vm.network "forwarded_port", guest: 3000, host: 3000
  config.vm.network "forwarded_port", guest: 57000, host: 57000
  config.vm.network "forwarded_port", guest: 8086, host: 8086
  #config.vm.network :forwarded_port, guest: 22, host: 2223
  
  config.vm.provider "virtualbox" do |vb|
    vb.name = 'telemetry_collector'
    vb.memory = 4096
    vb.cpus = 4
    vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
    vb.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
    # Added syntax below to retain source ip's when doing inbound nat from autopods
    # See https://forums.virtualbox.org/viewtopic.php?f=7&t=98804
    vb.customize ["modifyvm", :id, "--nataliasmode1", "proxyonly"]
  end

  # Configure shared folders
  config.vm.synced_folder "./", "/vagrant", type: 'virtualbox',
    owner: "vagrant",
    group: "vagrant",
    mount_options: ["dmode=775,fmode=664"]
  config.vm.synced_folder "./", "/home/vagrant/telemetry-collector", type: 'virtualbox',
    owner: "vagrant",
    group: "vagrant",
    mount_options: ["dmode=775,fmode=664"]

  # Add docker
  config.vm.provision :docker
  config.vm.provision :docker_compose
 
  # Fix ssh issue between newer ubuntu versions and cisco devices
  # See https://unix.stackexchange.com/questions/615987/ssh-to-cisco-device-fails-with-diffie-hellman-group1-sha1
  # See https://www.infosecmatter.com/solution-for-ssh-unable-to-negotiate-errors/
  $script = <<-SCRIPT
  echo -n "Ciphers " >> "$HOME/.ssh/config"
  ssh -Q cipher | tr '\n' ',' | sed -e 's/,$//' >> "$HOME/.ssh/config"
  echo >> "$HOME/.ssh/config"
  echo -n 'MACs ' >> "$HOME/.ssh/config"
  ssh -Q mac | tr '\n' ',' | sed -e 's/,$//' >> "$HOME/.ssh/config"
  echo >> "$HOME/.ssh/config"
  echo -n 'HostKeyAlgorithms ' >> "$HOME/.ssh/config"
  ssh -Q key | tr '\n' ',' | sed -e 's/,$//' >> "$HOME/.ssh/config"
  echo >> "$HOME/.ssh/config"
  echo -n 'KexAlgorithms ' >> "$HOME/.ssh/config"
  ssh -Q kex | tr '\n' ',' | sed -e 's/,$//' >> "$HOME/.ssh/config"
  echo >> "$HOME/.ssh/config"
    SCRIPT
  
  config.vm.provision "shell", inline: $script, privileged: false  

 
  # Fix local ssh-to-vm issue "How to fix SSH Permission denied"
  # See https://phoenixnap.com/kb/ssh-permission-denied-publickey # Solution 1
  $script = <<-SCRIPT
  sudo sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config
  sudo systemctl restart sshd
  SCRIPT
  config.vm.provision "shell", inline: $script, privileged: false  

  # Enable two-way file sync between host file system and virtualbox vm
  # See https://stackoverflow.com/questions/38229791/default-shared-folder-in-vagrant-not-visible
  $script = <<-SCRIPT
  sudo apt-get --no-install-recommends install virtualbox-guest-utils
  SCRIPT
  config.vm.provision "shell", inline: $script, privileged: false  

  config.vm.provision "shell" do |p|
    p.path = "bootstrap.sh"
  end

  #####################################################################################################
  # config.vm.provision "shell" do |p|
  #   p.path = "build.sh"
  #   p.args   = "start"
  # end
  #####################################################################################################


  # Saving this syntax for later in case we need to run docker exec
  # commands after the containers have been brought up
  # $script = <<-SCRIPT
  # echo output of "ip address" command on telegraf container
  # docker exec -t telegraf ip address
  # SCRIPT
  
  # Vagrant.configure("2") do |config|
  #   config.vm.provision "shell", inline: $script
  # end

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 8088, host: 8088

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   sudo apt-get update
  #   sudo apt-get install -y apache2
  # SHELL
end